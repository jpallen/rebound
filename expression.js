module.exports = (function(){
  /* Generated by PEG.js 0.6.2 (http://pegjs.majda.cz/). */
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "additive": parse_additive,
        "attribute": parse_attribute,
        "binding": parse_binding,
        "integer": parse_integer,
        "multiplicative": parse_multiplicative,
        "object": parse_object,
        "power": parse_power,
        "primary": parse_primary,
        "reference": parse_reference,
        "start": parse_start,
        "whitespace": parse_whitespace
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "start";
      }
      
      var pos = 0;
      var reportMatchFailures = true;
      var rightmostMatchFailuresPos = 0;
      var rightmostMatchFailuresExpected = [];
      var cache = {};
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        
        if (charCode <= 0xFF) {
          var escapeChar = 'x';
          var length = 2;
        } else {
          var escapeChar = 'u';
          var length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function quote(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         */
        return '"' + s
          .replace(/\\/g, '\\\\')            // backslash
          .replace(/"/g, '\\"')              // closing quote character
          .replace(/\r/g, '\\r')             // carriage return
          .replace(/\n/g, '\\n')             // line feed
          .replace(/[\x80-\uFFFF]/g, escape) // non-ASCII characters
          + '"';
      }
      
      function matchFailed(failure) {
        if (pos < rightmostMatchFailuresPos) {
          return;
        }
        
        if (pos > rightmostMatchFailuresPos) {
          rightmostMatchFailuresPos = pos;
          rightmostMatchFailuresExpected = [];
        }
        
        rightmostMatchFailuresExpected.push(failure);
      }
      
      function parse_start() {
        var cacheKey = 'start@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_whitespace();
        if (result3 !== null) {
          var result4 = parse_additive();
          if (result4 !== null) {
            var result5 = parse_whitespace();
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(main) { return main; })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_additive() {
        var cacheKey = 'additive@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos4 = pos;
        var savedPos5 = pos;
        var result17 = parse_multiplicative();
        if (result17 !== null) {
          var savedPos6 = pos;
          var savedPos7 = pos;
          var result22 = parse_whitespace();
          if (result22 !== null) {
            if (input.substr(pos, 1) === "+") {
              var result23 = "+";
              pos += 1;
            } else {
              var result23 = null;
              if (reportMatchFailures) {
                matchFailed("\"+\"");
              }
            }
            if (result23 !== null) {
              var result24 = parse_whitespace();
              if (result24 !== null) {
                var result25 = parse_multiplicative();
                if (result25 !== null) {
                  var result20 = [result22, result23, result24, result25];
                } else {
                  var result20 = null;
                  pos = savedPos7;
                }
              } else {
                var result20 = null;
                pos = savedPos7;
              }
            } else {
              var result20 = null;
              pos = savedPos7;
            }
          } else {
            var result20 = null;
            pos = savedPos7;
          }
          var result21 = result20 !== null
            ? (function(term) { return term; })(result20[3])
            : null;
          if (result21 !== null) {
            var result19 = result21;
          } else {
            var result19 = null;
            pos = savedPos6;
          }
          if (result19 !== null) {
            var result18 = [];
            while (result19 !== null) {
              result18.push(result19);
              var savedPos6 = pos;
              var savedPos7 = pos;
              var result22 = parse_whitespace();
              if (result22 !== null) {
                if (input.substr(pos, 1) === "+") {
                  var result23 = "+";
                  pos += 1;
                } else {
                  var result23 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"+\"");
                  }
                }
                if (result23 !== null) {
                  var result24 = parse_whitespace();
                  if (result24 !== null) {
                    var result25 = parse_multiplicative();
                    if (result25 !== null) {
                      var result20 = [result22, result23, result24, result25];
                    } else {
                      var result20 = null;
                      pos = savedPos7;
                    }
                  } else {
                    var result20 = null;
                    pos = savedPos7;
                  }
                } else {
                  var result20 = null;
                  pos = savedPos7;
                }
              } else {
                var result20 = null;
                pos = savedPos7;
              }
              var result21 = result20 !== null
                ? (function(term) { return term; })(result20[3])
                : null;
              if (result21 !== null) {
                var result19 = result21;
              } else {
                var result19 = null;
                pos = savedPos6;
              }
            }
          } else {
            var result18 = null;
          }
          if (result18 !== null) {
            var result15 = [result17, result18];
          } else {
            var result15 = null;
            pos = savedPos5;
          }
        } else {
          var result15 = null;
          pos = savedPos5;
        }
        var result16 = result15 !== null
          ? (function(firstTerm, lastTerms) { 
                lastTerms.unshift(firstTerm);
                return new E.Addition(lastTerms); 
              })(result15[0], result15[1])
          : null;
        if (result16 !== null) {
          var result14 = result16;
        } else {
          var result14 = null;
          pos = savedPos4;
        }
        if (result14 !== null) {
          var result0 = result14;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          var result5 = parse_multiplicative();
          if (result5 !== null) {
            var savedPos2 = pos;
            var savedPos3 = pos;
            var result10 = parse_whitespace();
            if (result10 !== null) {
              if (input.substr(pos, 1) === "-") {
                var result11 = "-";
                pos += 1;
              } else {
                var result11 = null;
                if (reportMatchFailures) {
                  matchFailed("\"-\"");
                }
              }
              if (result11 !== null) {
                var result12 = parse_whitespace();
                if (result12 !== null) {
                  var result13 = parse_multiplicative();
                  if (result13 !== null) {
                    var result8 = [result10, result11, result12, result13];
                  } else {
                    var result8 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result8 = null;
                  pos = savedPos3;
                }
              } else {
                var result8 = null;
                pos = savedPos3;
              }
            } else {
              var result8 = null;
              pos = savedPos3;
            }
            var result9 = result8 !== null
              ? (function(term) { return term; })(result8[3])
              : null;
            if (result9 !== null) {
              var result7 = result9;
            } else {
              var result7 = null;
              pos = savedPos2;
            }
            if (result7 !== null) {
              var result6 = [];
              while (result7 !== null) {
                result6.push(result7);
                var savedPos2 = pos;
                var savedPos3 = pos;
                var result10 = parse_whitespace();
                if (result10 !== null) {
                  if (input.substr(pos, 1) === "-") {
                    var result11 = "-";
                    pos += 1;
                  } else {
                    var result11 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"-\"");
                    }
                  }
                  if (result11 !== null) {
                    var result12 = parse_whitespace();
                    if (result12 !== null) {
                      var result13 = parse_multiplicative();
                      if (result13 !== null) {
                        var result8 = [result10, result11, result12, result13];
                      } else {
                        var result8 = null;
                        pos = savedPos3;
                      }
                    } else {
                      var result8 = null;
                      pos = savedPos3;
                    }
                  } else {
                    var result8 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result8 = null;
                  pos = savedPos3;
                }
                var result9 = result8 !== null
                  ? (function(term) { return term; })(result8[3])
                  : null;
                if (result9 !== null) {
                  var result7 = result9;
                } else {
                  var result7 = null;
                  pos = savedPos2;
                }
              }
            } else {
              var result6 = null;
            }
            if (result6 !== null) {
              var result3 = [result5, result6];
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
          var result4 = result3 !== null
            ? (function(firstTerm, lastTerms) { 
                  if (lastTerms.length == 1) {
                    return new E.Subtraction(firstTerm, lastTerms[0]);
                  } else {
                    return new E.Subtraction(firstTerm, new E.Addition(lastTerms));
                  }
                })(result3[0], result3[1])
            : null;
          if (result4 !== null) {
            var result2 = result4;
          } else {
            var result2 = null;
            pos = savedPos0;
          }
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_multiplicative();
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_multiplicative() {
        var cacheKey = 'multiplicative@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos4 = pos;
        var savedPos5 = pos;
        var result17 = parse_power();
        if (result17 !== null) {
          var savedPos6 = pos;
          var savedPos7 = pos;
          var result22 = parse_whitespace();
          if (result22 !== null) {
            if (input.substr(pos, 1) === "*") {
              var result23 = "*";
              pos += 1;
            } else {
              var result23 = null;
              if (reportMatchFailures) {
                matchFailed("\"*\"");
              }
            }
            if (result23 !== null) {
              var result24 = parse_whitespace();
              if (result24 !== null) {
                var result25 = parse_power();
                if (result25 !== null) {
                  var result20 = [result22, result23, result24, result25];
                } else {
                  var result20 = null;
                  pos = savedPos7;
                }
              } else {
                var result20 = null;
                pos = savedPos7;
              }
            } else {
              var result20 = null;
              pos = savedPos7;
            }
          } else {
            var result20 = null;
            pos = savedPos7;
          }
          var result21 = result20 !== null
            ? (function(term) { return term; })(result20[3])
            : null;
          if (result21 !== null) {
            var result19 = result21;
          } else {
            var result19 = null;
            pos = savedPos6;
          }
          if (result19 !== null) {
            var result18 = [];
            while (result19 !== null) {
              result18.push(result19);
              var savedPos6 = pos;
              var savedPos7 = pos;
              var result22 = parse_whitespace();
              if (result22 !== null) {
                if (input.substr(pos, 1) === "*") {
                  var result23 = "*";
                  pos += 1;
                } else {
                  var result23 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"*\"");
                  }
                }
                if (result23 !== null) {
                  var result24 = parse_whitespace();
                  if (result24 !== null) {
                    var result25 = parse_power();
                    if (result25 !== null) {
                      var result20 = [result22, result23, result24, result25];
                    } else {
                      var result20 = null;
                      pos = savedPos7;
                    }
                  } else {
                    var result20 = null;
                    pos = savedPos7;
                  }
                } else {
                  var result20 = null;
                  pos = savedPos7;
                }
              } else {
                var result20 = null;
                pos = savedPos7;
              }
              var result21 = result20 !== null
                ? (function(term) { return term; })(result20[3])
                : null;
              if (result21 !== null) {
                var result19 = result21;
              } else {
                var result19 = null;
                pos = savedPos6;
              }
            }
          } else {
            var result18 = null;
          }
          if (result18 !== null) {
            var result15 = [result17, result18];
          } else {
            var result15 = null;
            pos = savedPos5;
          }
        } else {
          var result15 = null;
          pos = savedPos5;
        }
        var result16 = result15 !== null
          ? (function(firstTerm, lastTerms) { 
                lastTerms.unshift(firstTerm);
                return new E.Multiplication(lastTerms); 
              })(result15[0], result15[1])
          : null;
        if (result16 !== null) {
          var result14 = result16;
        } else {
          var result14 = null;
          pos = savedPos4;
        }
        if (result14 !== null) {
          var result0 = result14;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          var result5 = parse_power();
          if (result5 !== null) {
            var savedPos2 = pos;
            var savedPos3 = pos;
            var result10 = parse_whitespace();
            if (result10 !== null) {
              if (input.substr(pos, 1) === "/") {
                var result11 = "/";
                pos += 1;
              } else {
                var result11 = null;
                if (reportMatchFailures) {
                  matchFailed("\"/\"");
                }
              }
              if (result11 !== null) {
                var result12 = parse_whitespace();
                if (result12 !== null) {
                  var result13 = parse_power();
                  if (result13 !== null) {
                    var result8 = [result10, result11, result12, result13];
                  } else {
                    var result8 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result8 = null;
                  pos = savedPos3;
                }
              } else {
                var result8 = null;
                pos = savedPos3;
              }
            } else {
              var result8 = null;
              pos = savedPos3;
            }
            var result9 = result8 !== null
              ? (function(term) { return term; })(result8[3])
              : null;
            if (result9 !== null) {
              var result7 = result9;
            } else {
              var result7 = null;
              pos = savedPos2;
            }
            if (result7 !== null) {
              var result6 = [];
              while (result7 !== null) {
                result6.push(result7);
                var savedPos2 = pos;
                var savedPos3 = pos;
                var result10 = parse_whitespace();
                if (result10 !== null) {
                  if (input.substr(pos, 1) === "/") {
                    var result11 = "/";
                    pos += 1;
                  } else {
                    var result11 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"/\"");
                    }
                  }
                  if (result11 !== null) {
                    var result12 = parse_whitespace();
                    if (result12 !== null) {
                      var result13 = parse_power();
                      if (result13 !== null) {
                        var result8 = [result10, result11, result12, result13];
                      } else {
                        var result8 = null;
                        pos = savedPos3;
                      }
                    } else {
                      var result8 = null;
                      pos = savedPos3;
                    }
                  } else {
                    var result8 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result8 = null;
                  pos = savedPos3;
                }
                var result9 = result8 !== null
                  ? (function(term) { return term; })(result8[3])
                  : null;
                if (result9 !== null) {
                  var result7 = result9;
                } else {
                  var result7 = null;
                  pos = savedPos2;
                }
              }
            } else {
              var result6 = null;
            }
            if (result6 !== null) {
              var result3 = [result5, result6];
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
          var result4 = result3 !== null
            ? (function(numerator, denominator) { 
                  if (denominator.length == 1) {
                    return new E.Division(numerator, denominator[0]);
                  } else {
                    return new E.Division(numerator, new E.Multiplication(denominator));
                  }
                })(result3[0], result3[1])
            : null;
          if (result4 !== null) {
            var result2 = result4;
          } else {
            var result2 = null;
            pos = savedPos0;
          }
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_power();
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_power() {
        var cacheKey = 'power@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result5 = parse_primary();
        if (result5 !== null) {
          var savedPos2 = pos;
          var savedPos3 = pos;
          var result10 = parse_whitespace();
          if (result10 !== null) {
            if (input.substr(pos, 1) === "^") {
              var result11 = "^";
              pos += 1;
            } else {
              var result11 = null;
              if (reportMatchFailures) {
                matchFailed("\"^\"");
              }
            }
            if (result11 !== null) {
              var result12 = parse_whitespace();
              if (result12 !== null) {
                var result13 = parse_primary();
                if (result13 !== null) {
                  var result8 = [result10, result11, result12, result13];
                } else {
                  var result8 = null;
                  pos = savedPos3;
                }
              } else {
                var result8 = null;
                pos = savedPos3;
              }
            } else {
              var result8 = null;
              pos = savedPos3;
            }
          } else {
            var result8 = null;
            pos = savedPos3;
          }
          var result9 = result8 !== null
            ? (function(exponent) { return exponent; })(result8[3])
            : null;
          if (result9 !== null) {
            var result7 = result9;
          } else {
            var result7 = null;
            pos = savedPos2;
          }
          if (result7 !== null) {
            var result6 = [];
            while (result7 !== null) {
              result6.push(result7);
              var savedPos2 = pos;
              var savedPos3 = pos;
              var result10 = parse_whitespace();
              if (result10 !== null) {
                if (input.substr(pos, 1) === "^") {
                  var result11 = "^";
                  pos += 1;
                } else {
                  var result11 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"^\"");
                  }
                }
                if (result11 !== null) {
                  var result12 = parse_whitespace();
                  if (result12 !== null) {
                    var result13 = parse_primary();
                    if (result13 !== null) {
                      var result8 = [result10, result11, result12, result13];
                    } else {
                      var result8 = null;
                      pos = savedPos3;
                    }
                  } else {
                    var result8 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result8 = null;
                  pos = savedPos3;
                }
              } else {
                var result8 = null;
                pos = savedPos3;
              }
              var result9 = result8 !== null
                ? (function(exponent) { return exponent; })(result8[3])
                : null;
              if (result9 !== null) {
                var result7 = result9;
              } else {
                var result7 = null;
                pos = savedPos2;
              }
            }
          } else {
            var result6 = null;
          }
          if (result6 !== null) {
            var result3 = [result5, result6];
          } else {
            var result3 = null;
            pos = savedPos1;
          }
        } else {
          var result3 = null;
          pos = savedPos1;
        }
        var result4 = result3 !== null
          ? (function(base, exponents) {
                if (exponents.length == 1) {
                  return new E.Exponential(base, exponents[0]);
                } else {
                  return new E.Exponential(base, new E.Multiplication(exponents));
                }
              })(result3[0], result3[1])
          : null;
        if (result4 !== null) {
          var result2 = result4;
        } else {
          var result2 = null;
          pos = savedPos0;
        }
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_primary();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_primary() {
        var cacheKey = 'primary@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result10 = parse_integer();
        if (result10 !== null) {
          var result0 = result10;
        } else {
          var result9 = parse_binding();
          if (result9 !== null) {
            var result0 = result9;
          } else {
            var savedPos0 = pos;
            var savedPos1 = pos;
            if (input.substr(pos, 1) === "(") {
              var result4 = "(";
              pos += 1;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\"(\"");
              }
            }
            if (result4 !== null) {
              var result5 = parse_whitespace();
              if (result5 !== null) {
                var result6 = parse_additive();
                if (result6 !== null) {
                  var result7 = parse_whitespace();
                  if (result7 !== null) {
                    if (input.substr(pos, 1) === ")") {
                      var result8 = ")";
                      pos += 1;
                    } else {
                      var result8 = null;
                      if (reportMatchFailures) {
                        matchFailed("\")\"");
                      }
                    }
                    if (result8 !== null) {
                      var result2 = [result4, result5, result6, result7, result8];
                    } else {
                      var result2 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result2 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result2 = null;
                  pos = savedPos1;
                }
              } else {
                var result2 = null;
                pos = savedPos1;
              }
            } else {
              var result2 = null;
              pos = savedPos1;
            }
            var result3 = result2 !== null
              ? (function(additive) { return additive; })(result2[2])
              : null;
            if (result3 !== null) {
              var result1 = result3;
            } else {
              var result1 = null;
              pos = savedPos0;
            }
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_binding() {
        var cacheKey = 'binding@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "{") {
          var result3 = "{";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"{\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_whitespace();
          if (result4 !== null) {
            var result5 = parse_reference();
            if (result5 !== null) {
              var result6 = parse_whitespace();
              if (result6 !== null) {
                if (input.substr(pos, 1) === "}") {
                  var result7 = "}";
                  pos += 1;
                } else {
                  var result7 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"}\"");
                  }
                }
                if (result7 !== null) {
                  var result1 = [result3, result4, result5, result6, result7];
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(ref) { return new E.Reference(ref); })(result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_reference() {
        var cacheKey = 'reference@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos1 = pos;
        var savedPos2 = pos;
        var result7 = parse_attribute();
        if (result7 !== null) {
          if (input.substr(pos, 1) === ".") {
            var result8 = ".";
            pos += 1;
          } else {
            var result8 = null;
            if (reportMatchFailures) {
              matchFailed("\".\"");
            }
          }
          if (result8 !== null) {
            var result9 = parse_reference();
            if (result9 !== null) {
              var result5 = [result7, result8, result9];
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
        } else {
          var result5 = null;
          pos = savedPos2;
        }
        var result6 = result5 !== null
          ? (function(attribute, ref) { ref.unshift(attribute); return ref })(result5[0], result5[2])
          : null;
        if (result6 !== null) {
          var result4 = result6;
        } else {
          var result4 = null;
          pos = savedPos1;
        }
        if (result4 !== null) {
          var result0 = result4;
        } else {
          var savedPos0 = pos;
          var result2 = parse_attribute();
          var result3 = result2 !== null
            ? (function(attribute) { return [attribute]; })(result2)
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_attribute() {
        var cacheKey = 'attribute@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos).match(/^[a-zA-Z_$]/) !== null) {
          var result3 = input.charAt(pos);
          pos++;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("[a-zA-Z_$]");
          }
        }
        if (result3 !== null) {
          var result4 = [];
          if (input.substr(pos).match(/^[0-9a-zA-Z_$]/) !== null) {
            var result5 = input.charAt(pos);
            pos++;
          } else {
            var result5 = null;
            if (reportMatchFailures) {
              matchFailed("[0-9a-zA-Z_$]");
            }
          }
          while (result5 !== null) {
            result4.push(result5);
            if (input.substr(pos).match(/^[0-9a-zA-Z_$]/) !== null) {
              var result5 = input.charAt(pos);
              pos++;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9a-zA-Z_$]");
              }
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(first, rest) { return first + rest.join(""); })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_object() {
        var cacheKey = 'object@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result5 = parse_attribute();
        if (result5 !== null) {
          if (input.substr(pos, 1) === ".") {
            var result6 = ".";
            pos += 1;
          } else {
            var result6 = null;
            if (reportMatchFailures) {
              matchFailed("\".\"");
            }
          }
          if (result6 !== null) {
            var result7 = parse_object();
            if (result7 !== null) {
              var result3 = [result5, result6, result7];
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
        } else {
          var result3 = null;
          pos = savedPos1;
        }
        var result4 = result3 !== null
          ? (function(attribute, object) { return attribute + "." + object; })(result3[0], result3[2])
          : null;
        if (result4 !== null) {
          var result2 = result4;
        } else {
          var result2 = null;
          pos = savedPos0;
        }
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_attribute();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_integer() {
        var cacheKey = 'integer@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[0-9]/) !== null) {
          var result3 = input.charAt(pos);
          pos++;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("[0-9]");
          }
        }
        if (result3 !== null) {
          var result1 = [];
          while (result3 !== null) {
            result1.push(result3);
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result3 = input.charAt(pos);
              pos++;
            } else {
              var result3 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
          }
        } else {
          var result1 = null;
        }
        var result2 = result1 !== null
          ? (function(digits) { return new E.Number(parseInt(digits.join(""), 10)); })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("integer");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_whitespace() {
        var cacheKey = 'whitespace@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result0 = [];
        if (input.substr(pos).match(/^[ 	]/) !== null) {
          var result1 = input.charAt(pos);
          pos++;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("[ 	]");
          }
        }
        while (result1 !== null) {
          result0.push(result1);
          if (input.substr(pos).match(/^[ 	]/) !== null) {
            var result1 = input.charAt(pos);
            pos++;
          } else {
            var result1 = null;
            if (reportMatchFailures) {
              matchFailed("[ 	]");
            }
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function buildErrorMessage() {
        function buildExpected(failuresExpected) {
          failuresExpected.sort();
          
          var lastFailure = null;
          var failuresExpectedUnique = [];
          for (var i = 0; i < failuresExpected.length; i++) {
            if (failuresExpected[i] !== lastFailure) {
              failuresExpectedUnique.push(failuresExpected[i]);
              lastFailure = failuresExpected[i];
            }
          }
          
          switch (failuresExpectedUnique.length) {
            case 0:
              return 'end of input';
            case 1:
              return failuresExpectedUnique[0];
            default:
              return failuresExpectedUnique.slice(0, failuresExpectedUnique.length - 1).join(', ')
                + ' or '
                + failuresExpectedUnique[failuresExpectedUnique.length - 1];
          }
        }
        
        var expected = buildExpected(rightmostMatchFailuresExpected);
        var actualPos = Math.max(pos, rightmostMatchFailuresPos);
        var actual = actualPos < input.length
          ? quote(input.charAt(actualPos))
          : 'end of input';
        
        return 'Expected ' + expected + ' but ' + actual + ' found.';
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i <  rightmostMatchFailuresPos; i++) {
          var ch = input.charAt(i);
          if (ch === '\n') {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === '\r' | ch === '\u2028' || ch === '\u2029') {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      
        var E = require("./rebound").Expressions;
      
    
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostMatchFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var errorPosition = computeErrorPosition();
        throw new this.SyntaxError(
          buildErrorMessage(),
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(message, line, column) {
    this.name = 'SyntaxError';
    this.message = message;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
